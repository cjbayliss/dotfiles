#!/usr/bin/env python3
"""jr is a tool to 'Just Run' a command using nix-shell"""

from difflib import get_close_matches
from os import path
from platform import machine, system
import sqlite3
import subprocess
import sys

NIXOS_PLATFORM = f"{machine()}-{system().lower()}"
NIXOS_PROGRAMS_DATABASE = (
    "/nix/var/nix/profiles/per-user/root/channels/nixos/programs.sqlite"
)
PROGRAM = sys.argv[1]


def get_packages(database: str, platform: str, program: str) -> list:
    """Return all package matches for the program"""
    pkgs = (
        sqlite3.connect(database)
        .cursor()
        .execute(
            "SELECT package FROM Programs WHERE system = (?) AND name = (?)",
            (platform, program),
        )
        .fetchall()
    )
    if len(pkgs) == 0:
        print(f"{program} not found in {database}")
        sys.exit(1)

    return [pkg[0] for pkg in pkgs]


def escape_paths(arguments: list) -> list:
    """Return the arguments with paths escaped"""
    for i, arg in enumerate(arguments):
        if path.exists(arg):
            arguments[i] = f"'{arg}'"
    return arguments


try:
    if len(sys.argv) >= 2:
        packages = get_close_matches(
            PROGRAM,
            get_packages(NIXOS_PROGRAMS_DATABASE, NIXOS_PLATFORM, PROGRAM),
        )
        escaped_arguments = f"{PROGRAM} {' '.join(escape_paths(sys.argv[2:]))}"
        subprocess.run(
            [
                "nix-shell",
                "-p",
                packages[0],
                "--run",
                escaped_arguments,
            ],
            check=True,
        )
    else:
        print("usage: jr program [PATH]")
except subprocess.CalledProcessError as error:
    print(f"Error: {error}")
