#!/usr/bin/env python3
"""jr is a tool to 'Just Run' a command using nix-shell"""

from difflib import get_close_matches
from os import path
from platform import machine, system
from typing import List, Tuple
import sqlite3
import subprocess
import sys

NIXOS_PLATFORM = f"{machine()}-{system().lower()}"
NIXOS_PROGRAMS_DATABASE = (
    "/nix/var/nix/profiles/per-user/root/channels/nixos/programs.sqlite"
)


def get_packages(database: str, platform: str, program: str) -> List[str]:
    """Return all package matches for the program"""
    pkgs: List[Tuple[str]] = (
        sqlite3.connect(database)
        .cursor()
        .execute(
            "SELECT package FROM Programs WHERE system = (?) AND name = (?)",
            (platform, program),
        )
        .fetchall()
    )
    if not pkgs:
        print(f"{program} not found in {database}")
        sys.exit(1)

    return [pkg[0] for pkg in pkgs]


def escape_paths(arguments: List[str]) -> List[str]:
    """Return the arguments with paths escaped"""
    return [f"'{arg}'" if path.exists(arg) else arg for arg in arguments]


def main() -> None:  # pylint: disable=C0116
    if len(sys.argv) < 2:
        print("usage: jr program [PATH]")
        sys.exit(1)

    program = sys.argv[1]
    packages = get_close_matches(
        program,
        get_packages(NIXOS_PROGRAMS_DATABASE, NIXOS_PLATFORM, program),
        cutoff=0,
    )
    safe_args = " ".join(escape_paths(sys.argv[2:]))
    try:
        subprocess.run(
            [
                "nix-shell",
                "-p",
                packages[0],
                "--run",
                f"{program} {safe_args}",
            ],
            check=True,
        )
    except subprocess.CalledProcessError:
        sys.exit(1)


if __name__ == "__main__":
    main()
