#!/usr/bin/env nu

# custom dmenu
def dmenu [] {
  if ($env.XDG_SESSION_TYPE == 'wayland') {
    tofi
  } else {
    ^dmenu -i -fn 'Iosevka-11.5:semibold' -nb '#000' -nf '#fff' -sb '#000' -sf '#b6a0ff'
  }
}

# function to generate the application list and cache it as a json file
def generate_app_list [] {
  $env.XDG_DATA_DIRS | split row ':' | append '~/.local/share'
  | each {||
    if ($'($in)/applications' | path exists) {
      glob $'($in)/applications/**'
    }
  }
  | flatten | wrap name | where name =~ '\.desktop' | get name
  | each {||
    open $in
    | grep -m2 -e ^Name= -e ^Exec=
    | str replace 'Name=' 'name,'
    | str replace 'Exec=' 'command,'
    | str replace -r ' -- %.| %.' ''
    | from csv | transpose | headers
  }
  | flatten | select name command | uniq | sort
  | to json | save -f $'($env.XDG_CACHE_HOME)/applications.json'
}

def main [] {
  # generate the application list if it doesn't exists
  if not ($'($env.XDG_CACHE_HOME)/applications.json' | path exists) {
    generate_app_list
  }

  let $apps = open $'($env.XDG_CACHE_HOME)/applications.json'

  let $selection = ($apps | get name | to text | dmenu | str replace -r '\n' '')

  if not ($selection | is-empty) {
    sh -c $'($apps | where name == $selection | get command | to text) &'
  }

  # FIXME: this is an ugly solution, would be better to hook nix-build
  # regenerate the application list after we are done
  generate_app_list
}
